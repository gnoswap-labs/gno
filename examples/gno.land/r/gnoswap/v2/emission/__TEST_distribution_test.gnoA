// ---       runtime: cycle=1.9k imports=-1 allocs=133.3k(0.03%)
// ---       runtime: cycle=8.8k imports=-1 allocs=624.5k(0.12%)
// ---       runtime: cycle=16.9k imports=-1 allocs=1.2M(0.24%)
// ---       runtime: cycle=18.6k imports=-1 allocs=1.3M(0.26%)
// ok      ./examples/gno.land/r/gnoswap/v2/emission 	1.05s

package emission

import (
	"std"
	"testing"

	"gno.land/r/gnoswap/v2/gns"
)

func Test_mintGns(t *testing.T) {
	shouldEQ(t, gns.TotalSupply(), 100000000000000) // GSA has
	shouldEQ(t, gnsBalance(emissionAddr), 0)

	std.TestSkipHeights(123)
	mintGns() // 1 ~ 123 height

	shouldEQ(t, gnsBalance(emissionAddr), 1_755_136_938)
	shouldEQ(t, gns.TotalSupply(), 100000000000000+1_755_136_938)

	shouldEQ(t, std.GetHeight(), 246)
}

func Test_distributeToTarget(t *testing.T) {
	shouldEQ(t, gnsBalance(emissionAddr), 1_755_136_938)
	distributeToTarget(gnsBalance(emissionAddr))
	shouldEQ(t, gnsBalance(emissionAddr), 2) // left due to division
}

func Test_distributeToTarget_After5Block(t *testing.T) {
	// current 1 block will mint 14_269_406
	std.TestSkipHeights(5) // increase 14_269_406 * 5 = 71_347_030
	mintGns()
	shouldEQ(t, gnsBalance(emissionAddr), 71_347_032) // 2 + 71_347_030

	distributeToTarget(gnsBalance(emissionAddr))
	shouldEQ(t, gnsBalance(emissionAddr), 1)
}

func TestChangeDistributionPct_ByAdmin(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	shouldEQ(t, GetDistributionPct(LIQUIDITY_STAKING), 7500)
	shouldEQ(t, GetDistributionPct(DEVOPS), 2000)

	ChangeDistributionPct02(
		1, 5000,
		2, 4500,
	)
	shouldEQ(t, GetDistributionPct(LIQUIDITY_STAKING), 5000)
	shouldEQ(t, GetDistributionPct(DEVOPS), 4500)

	ChangeDistributionPct03(
		1, 5000,
		2, 4000,
		3, 1000,
	)
	shouldEQ(t, GetDistributionPct(LIQUIDITY_STAKING), 5000)
	shouldEQ(t, GetDistributionPct(DEVOPS), 4000)
	shouldEQ(t, GetDistributionPct(COMMUNITY_POOL), 1000)

	ChangeDistributionPct04(
		1, 10000,
		2, 0,
		3, 0,
		4, 0,
	)
	shouldEQ(t, GetDistributionPct(LIQUIDITY_STAKING), 10000)
	shouldEQ(t, GetDistributionPct(DEVOPS), 0)
	shouldEQ(t, GetDistributionPct(COMMUNITY_POOL), 0)
	shouldEQ(t, GetDistributionPct(XGNS), 0)
}
