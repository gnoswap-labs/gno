// ---       runtime: cycle=1.7k imports=6 allocs=112.7k(0.02%)
// ---       runtime: cycle=6.0k imports=6 allocs=214.1k(0.04%)
// ---       runtime: cycle=11.2k imports=6 allocs=363.3k(0.07%)
// ---       runtime: cycle=250.4k imports=6 allocs=6.9M(1.37%)
// ---       runtime: cycle=371.5k imports=6 allocs=10.1M(2.02%)
// ---       runtime: cycle=578.7k imports=6 allocs=14.8M(2.96%)
// ---       runtime: cycle=824.7k imports=6 allocs=20.4M(4.08%)
// ---       runtime: cycle=1.2M imports=6 allocs=29.6M(5.91%)
// ---       runtime: cycle=1.7M imports=6 allocs=38.9M(7.79%)
// ---       runtime: cycle=1.8M imports=6 allocs=41.2M(8.24%)
// ---       runtime: cycle=1.9M imports=6 allocs=43.4M(8.69%)
// ---       runtime: cycle=2.0M imports=6 allocs=47.2M(9.45%)
// ---       runtime: cycle=2.2M imports=6 allocs=51.9M(10.37%)
// ---       runtime: cycle=2.2M imports=6 allocs=52.4M(10.48%)
// ---       runtime: cycle=2.3M imports=6 allocs=53.0M(10.59%)
// ok      ./examples/gno.land/r/gnoswap/v2/pool 	1.54s

package pool

import (
	"std"
	"strconv"
	"testing"

	"gno.land/r/gnoswap/v2/consts"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"
	"gno.land/r/onbloc/foo"

	"gno.land/r/gnoswap/v2/gns"

	u256 "gno.land/p/gnoswap/uint256"
)

var (
	test_tickLower          = int32(9000)
	test_tickUpper          = int32(11000)
	test_liquidityExpectStr = "100000000"
	test_liquidityExpect256 = u256.NewUint(100_000_000)
)

// Create Foo:Bar Pool
func TestCreateFooBarPool(t *testing.T) {
	// call gns faucet to get creation fee
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), poolCreationFee)

	CreatePool(fooPath, barPath, fee500, "130621891405341611593710811006")
	// ---       event: {GNOSWAP gno.land/r/gnoswap/v2/pool CreatePool [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_poolPath gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500}]}
	shouldEQ(t, len(pools), 1)
}

// Create Bar:Baz Pool
func TestCreateBarBazPool(t *testing.T) {
	// call gns faucet to get creation fee
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), poolCreationFee)

	CreatePool(barPath, bazPath, fee500, "130621891405341611593710811006")
	// ---       event: {GNOSWAP gno.land/r/gnoswap/v2/pool CreatePool [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_poolPath gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500}]}
	shouldEQ(t, len(pools), 2)
}

// Mint Foo:Bar Liquidity by gsa
func TestMintFooBarLiquidity(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	std.TestSetRealm(posRealm)
	std.TestSetOrigCaller(gsa)
	amount0, amount1 := Mint(
		fooPath,
		barPath,
		fee500,
		consts.POSITION_ADDR.String(),
		-test_tickUpper,
		-test_tickLower,
		test_liquidityExpectStr,
	)
	shouldEQ(t, amount0, "8040316")
	shouldEQ(t, amount1, "2958015")
}

// Mint Bar:Baz Liquidity by gsa
func TestMintBarBazLiquidity(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	std.TestSetRealm(posRealm)
	std.TestSetOrigCaller(gsa)
	amount0, amount1 := Mint(
		barPath,
		bazPath,
		fee500,
		consts.POSITION_ADDR.String(),
		test_tickLower,
		test_tickUpper,
		test_liquidityExpectStr,
	)
	shouldEQ(t, amount0, "2958015")
	shouldEQ(t, amount1, "8040316")
}

// Swap Foo:Bar Foo > Bar by gsa
func TestSwapFooBarFooToBar(t *testing.T) {
	oldTest1Bar := balanceOfByRegisterCall(barPath, gsa)
	oldTest1Foo := balanceOfByRegisterCall(fooPath, gsa)

	oldPoolBar := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)
	oldPoolFoo := balanceOfByRegisterCall(fooPath, consts.POOL_ADDR)

	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), 16000)

	std.TestSetRealm(rouRealm)
	std.TestSetOrigCaller(gsa)
	poolIn, poolOut := Swap(
		barPath,
		fooPath,
		fee500,
		gsa.String(),
		true,
		"16000",
		consts.MIN_PRICE,
		std.GetOrigCaller().String(),
	)
	// ---       event: {GNOSWAP gno.land/r/gnoswap/v2/pool Swap [{m_callType INDIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm gno.land/r/gnoswap/v2/router} {p_poolPath gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500} {p_zeroForOne true} {p_amountSpecified 16000} {p_sqrtPriceLimitX96 4295128740} {p_payer g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {p_recipient g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {amount0 16000} {amount1 -5882} {protocol_fee0 0} {protocol_fee1 0} {swap_fee 8}]}
	shouldEQ(t, poolIn, "16000")
	shouldEQ(t, poolOut, "-5882")

	newTest1Bar := balanceOfByRegisterCall(barPath, gsa)
	newTest1Foo := balanceOfByRegisterCall(fooPath, gsa)

	newPoolBar := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)
	newPoolFoo := balanceOfByRegisterCall(fooPath, consts.POOL_ADDR)

	shouldEQ(t, oldTest1Bar-newTest1Bar, 16000)
	shouldEQ(t, newTest1Foo-oldTest1Foo, 5882)

	shouldEQ(t, newPoolBar-oldPoolBar, 16000)
	shouldEQ(t, oldPoolFoo-newPoolFoo, 5882)
}

// Swap Bar:Baz Bar > Baz by gsa
func TestSwapBarBazBarToBaz(t *testing.T) {
	oldTest1Token0Balance := balanceOfByRegisterCall(barPath, gsa)
	oldgsaBazBalance := balanceOfByRegisterCall(bazPath, gsa)
	oldPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)
	oldPoolBazBalance := balanceOfByRegisterCall(bazPath, consts.POOL_ADDR)

	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), 16000)

	std.TestSetRealm(rouRealm)
	std.TestSetOrigCaller(gsa)
	poolIn, poolOut := Swap(
		barPath,
		bazPath,
		fee500,
		gsa.String(),
		true,
		"16000",
		consts.MIN_PRICE,
		std.GetOrigCaller().String(),
	)
	// ---       event: {GNOSWAP gno.land/r/gnoswap/v2/pool Swap [{m_callType INDIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm gno.land/r/gnoswap/v2/router} {p_poolPath gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500} {p_zeroForOne true} {p_amountSpecified 16000} {p_sqrtPriceLimitX96 4295128740} {p_payer g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {p_recipient g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {amount0 16000} {amount1 -43457} {protocol_fee0 0} {protocol_fee1 0} {swap_fee 8}]}

	shouldEQ(t, poolIn, "16000")
	shouldEQ(t, poolOut, "-43457")

	newTest1Token0Balance := balanceOfByRegisterCall(barPath, gsa)
	newgsaBazBalance := balanceOfByRegisterCall(bazPath, gsa)
	newPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)
	newPoolBazBalance := balanceOfByRegisterCall(bazPath, consts.POOL_ADDR)

	shouldEQ(t, oldTest1Token0Balance-newTest1Token0Balance, 16000)
	shouldEQ(t, newgsaBazBalance-oldgsaBazBalance, 43457)
	shouldEQ(t, newPoolToken0Balance-oldPoolToken0Balance, 16000)
	shouldEQ(t, oldPoolBazBalance-newPoolBazBalance, 43457)
}

// Collect Foo:Bar Fees by gsa
func TestCollectFooBarFees(t *testing.T) {
	std.TestSetRealm(posRealm)
	std.TestSetOrigCaller(gsa)

	oldTest1Token1Balance := balanceOfByRegisterCall(fooPath, gsa)
	oldTest1Token0Balance := balanceOfByRegisterCall(barPath, gsa)
	oldPoolToken1Balance := balanceOfByRegisterCall(fooPath, consts.POOL_ADDR)
	oldPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)

	// burn 0 to collect swap fees
	Burn(fooPath, barPath, fee500, -test_tickUpper, -test_tickLower, "0")

	c0, c1 := Collect(
		fooPath,
		barPath,
		fee500,
		gsa.String(),
		-test_tickUpper,
		-test_tickLower,
		"100000",
		"100000",
	)

	shouldNEQ(t, c0, "0") // swap was foo > bar, so only foo has fees
	shouldEQ(t, c1, "0")  // swap was foo > bar, so bar has no fees

	newTest1Token1Balance := balanceOfByRegisterCall(fooPath, gsa)
	newTest1Token0Balance := balanceOfByRegisterCall(barPath, gsa)
	newPoolToken1Balance := balanceOfByRegisterCall(fooPath, consts.POOL_ADDR)
	newPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)

	shouldEQ(t, newTest1Token1Balance-oldTest1Token1Balance, c1)
	shouldEQ(t, newTest1Token0Balance-oldTest1Token0Balance, strToUint64(c0))
	shouldEQ(t, oldPoolToken1Balance-newPoolToken1Balance, c1)
	shouldEQ(t, oldPoolToken0Balance-newPoolToken0Balance, strToUint64(c0))
}

// Collect Bar:Baz Fees by gsa
func TestCollectBarBazFees(t *testing.T) {
	std.TestSetRealm(posRealm)
	std.TestSetOrigCaller(gsa)

	oldTest1Token0Balance := balanceOfByRegisterCall(barPath, gsa)
	oldgsaBazBalance := balanceOfByRegisterCall(bazPath, gsa)
	oldPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)
	oldPoolBazBalance := balanceOfByRegisterCall(bazPath, consts.POOL_ADDR)

	// burn 0 to collect swap fees
	Burn(barPath, bazPath, fee500, test_tickLower, test_tickUpper, "0")

	c0, c1 := Collect(
		barPath,
		bazPath,
		fee500,
		gsa.String(),
		test_tickLower,
		test_tickUpper,
		"100000",
		"100000",
	)

	shouldNEQ(t, c0, "0") // swap was foo > bar, so only foo has fees
	shouldEQ(t, c1, "0")  // swap was foo > bar, so bar has no fees

	newTest1Token0Balance := balanceOfByRegisterCall(barPath, gsa)
	newgsaBazBalance := balanceOfByRegisterCall(bazPath, gsa)
	newPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)
	newPoolBazBalance := balanceOfByRegisterCall(bazPath, consts.POOL_ADDR)

	shouldEQ(t, newTest1Token0Balance-oldTest1Token0Balance, strToUint64(c0))
	shouldEQ(t, newgsaBazBalance-oldgsaBazBalance, c1)
	shouldEQ(t, oldPoolToken0Balance-newPoolToken0Balance, strToUint64(c0))
	shouldEQ(t, oldPoolBazBalance-newPoolBazBalance, c1)
}

// Burn Foo:Bar Liquidity by gsa
func TestBurnFooBarLiquidity(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(posRealm)

	pool := GetPool(fooPath, barPath, fee500)
	poolOldLiquidity := pool.PoolGetLiquidity()

	b0, b1 := Burn(
		fooPath,
		barPath,
		fee500,
		-test_tickUpper,
		-test_tickLower,
		test_liquidityExpectStr,
	)

	shouldNEQ(t, b0, "0")
	shouldNEQ(t, b1, "0")

	poolNewLiquidity := pool.PoolGetLiquidity()

	shouldEQ(t, true, new(u256.Uint).Sub(poolOldLiquidity, poolNewLiquidity).Eq(test_liquidityExpect256))
}

// Burn Bar:Baz Liquidity by gsa
func TestBurnBarBazLiquidity(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(posRealm)

	pool := GetPool(barPath, bazPath, fee500)
	poolOldLiquidity := pool.PoolGetLiquidity()

	b0, b1 := Burn(
		barPath,
		bazPath,
		fee500,
		test_tickLower,
		test_tickUpper,
		test_liquidityExpectStr,
	)

	shouldNEQ(t, b0, "0")
	shouldNEQ(t, b1, "0")

	poolNewLiquidity := pool.PoolGetLiquidity()

	// shouldEQ(t, poolOldLiquidity-poolNewLiquidity, test_liquidityExpect256)
}

// Collect Foo:Bar burned Liquidity by gsa
func TestCollectFooBarLiquidity(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(posRealm)

	oldTest1Token1Balance := balanceOfByRegisterCall(fooPath, gsa)
	oldTest1Token0Balance := balanceOfByRegisterCall(barPath, gsa)
	oldPoolToken1Balance := balanceOfByRegisterCall(fooPath, consts.POOL_ADDR)
	oldPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)

	c0, c1 := Collect(
		fooPath,
		barPath,
		fee500,
		gsa.String(),
		-test_tickUpper,
		-test_tickLower,
		"100000",
		"100000",
	)

	shouldNEQ(t, c0, "0")
	shouldNEQ(t, c1, "0")

	newTest1Token1Balance := balanceOfByRegisterCall(fooPath, gsa)
	newTest1Token0Balance := balanceOfByRegisterCall(barPath, gsa)
	newPoolToken1Balance := balanceOfByRegisterCall(fooPath, consts.POOL_ADDR)
	newPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)

	shouldEQ(t, newTest1Token1Balance-oldTest1Token1Balance, strToUint64(c0))
	shouldEQ(t, newTest1Token0Balance-oldTest1Token0Balance, strToUint64(c1))
	shouldEQ(t, oldPoolToken1Balance-newPoolToken1Balance, strToUint64(c0))
	shouldEQ(t, oldPoolToken0Balance-newPoolToken0Balance, strToUint64(c1))
}

// Collect Bar:Baz burned Liquidity by gsa
func TestCollectBarBazLiquidity(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(posRealm)

	oldTest1Token0Balance := balanceOfByRegisterCall(barPath, gsa)
	oldgsaBazBalance := balanceOfByRegisterCall(bazPath, gsa)
	oldPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)
	oldPoolBazBalance := balanceOfByRegisterCall(bazPath, consts.POOL_ADDR)

	c0, c1 := Collect(
		barPath,
		bazPath,
		fee500,
		gsa.String(),
		test_tickLower,
		test_tickUpper,
		"100000",
		"100000",
	)

	shouldNEQ(t, c0, "0")
	shouldNEQ(t, c1, "0")

	newTest1Token0Balance := balanceOfByRegisterCall(barPath, gsa)
	newgsaBazBalance := balanceOfByRegisterCall(bazPath, gsa)
	newPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)
	newPoolBazBalance := balanceOfByRegisterCall(bazPath, consts.POOL_ADDR)

	shouldEQ(t, newTest1Token0Balance-oldTest1Token0Balance, strToUint64(c0))
	shouldEQ(t, newgsaBazBalance-oldgsaBazBalance, strToUint64(c1))
	shouldEQ(t, oldPoolToken0Balance-newPoolToken0Balance, strToUint64(c0))
	shouldEQ(t, oldPoolBazBalance-newPoolBazBalance, strToUint64(c1))
}

// UTILs //
func strToUint64(s string) uint64 {
	i, err := strconv.Atoi(s)
	if err != nil {
		panic("strToUint64")
	}
	return uint64(i)
}
