// ---       runtime: cycle=210.1k imports=5 allocs=6.3M(1.26%)
// ---       runtime: cycle=614.5k imports=5 allocs=15.6M(3.11%)
// ---       runtime: cycle=655.9k imports=5 allocs=17.4M(3.48%)
// ---       runtime: cycle=851.4k imports=5 allocs=22.2M(4.45%)
// ---       runtime: cycle=891.1k imports=5 allocs=24.0M(4.81%)
// ---       runtime: cycle=1.0M imports=5 allocs=30.1M(6.03%)
// ---       runtime: cycle=1.2M imports=5 allocs=36.7M(7.34%)
// ---       runtime: cycle=1.4M imports=5 allocs=43.3M(8.66%)
// ---       runtime: cycle=1.8M imports=5 allocs=52.0M(10.41%)
// ---       runtime: cycle=1.9M imports=5 allocs=58.3M(11.66%)
// ---       runtime: cycle=2.1M imports=5 allocs=62.3M(12.46%)
// ---       runtime: cycle=2.4M imports=5 allocs=73.0M(14.60%)
// ---       runtime: cycle=2.7M imports=5 allocs=84.6M(16.93%)
// ---       runtime: cycle=2.8M imports=5 allocs=90.1M(18.03%)
// ok      ./examples/gno.land/r/gnoswap/v2/staker 	1.84s

// external incentive + warm up period testing

package staker

import (
	"std"
	"testing"

	"gno.land/r/gnoswap/v2/consts"

	pl "gno.land/r/gnoswap/v2/pool"
	pn "gno.land/r/gnoswap/v2/position"

	"gno.land/r/gnoswap/v2/gnft"
	"gno.land/r/gnoswap/v2/gns"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/qux"
)

func init() {
	// override warm-up period for testing
	warmUp[100] = 901 // 30m ~
	warmUp[70] = 301  // 10m ~ 30m
	warmUp[50] = 151  // 5m ~ 10m
	warmUp[30] = 1    // ~ 5m
}

func TestPoolInitCreatePool(t *testing.T) {

	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee()*3)

	pl.CreatePool(barPath, quxPath, 100, "79228162514264337593543950337")
	pl.CreatePool(barPath, bazPath, 3000, "79228162514264337593543950337")

	std.TestSkipHeights(1)
}

func TestMintBarQux100_1(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := pn.Mint(
		barPath,      // token0
		quxPath,      // token1
		fee100,       // fee
		int32(-1000), // tickLower
		int32(1000),  // tickUpper
		"50",         // amount0Desired
		"50",         // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,
		gsa.String(),
	)

	shouldEQ(t, tokenId, 1)
	shouldEQ(t, gnft.OwnerOf(tid(tokenId)), std.GetOrigCaller()) // gsa

	std.TestSkipHeights(1)
}

func TestCreateExternalIncentive(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.STAKER_ADDR), consts.UINT64_MAX)

	CreateExternalIncentive(
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100", // targetPoolPath string,
		barPath,    // rewardToken string, // token path should be registered
		"20000000", // _rewardAmount string,
		1234569600,
		1234569600+TIMESTAMP_90DAYS,
	)

	// after
	printExternalInfo()

	std.TestSkipHeights(1)
}

func TestStakeToken_1(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	gnft.Approve(a2u(GetOrigPkgAddr()), tid(1))
	StakeToken(1)

	std.TestSkipHeights(1)
}

func TestBeforeActive(t *testing.T) {
	std.TestSkipHeights(1)

	pei := GetPrintExternalInfo()
	shouldEQ(t, pei, `{"height":128,"time":1234567900,"position":[]}`)
}

func TestAfterActive(t *testing.T) {
	std.TestSkipHeights(849) // in active
	std.TestSkipHeights(1)   // active // but no block passed since active
	std.TestSkipHeights(50)  // skip 50 more block

	pei := GetPrintExternalInfo()
	shouldEQ(t, pei, `{"height":1028,"time":1234569700,"position":[{"lpTokenId":1,"stakedHeight":126,"stakedTimestamp":1234567896,"incentive":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","rewardToken":"gno.land/r/onbloc/bar","rewardAmount":"20000000","rewardLeft":"19999743","startTimestamp":1234569600,"endTimestamp":1242345600,"rewardPerBlockX96":"407552276307944123423579991440","rewardPerBlock":"5","refundee":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","tokenAmountX96":"20377613815397206171178999572000","tokenAmount":257,"tokenAmountFull":257,"tokenAmountActualFull":77}]}]}`)
}

func TestDuratino200(t *testing.T) {
	std.TestSkipHeights(199) // skip 1 + 199 = 200 more block

	pei := GetPrintExternalInfo()
	shouldEQ(t, pei, `{"height":1227,"time":1234570098,"position":[{"lpTokenId":1,"stakedHeight":126,"stakedTimestamp":1234567896,"incentive":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","rewardToken":"gno.land/r/onbloc/bar","rewardAmount":"20000000","rewardLeft":"19998463","startTimestamp":1234569600,"endTimestamp":1242345600,"rewardPerBlockX96":"407552276307944123423579991440","rewardPerBlock":"5","refundee":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","tokenAmountX96":"101480516800678086732471417868560","tokenAmount":1280,"tokenAmountFull":1280,"tokenAmountActualFull":485}]}]}`)
}

func TestCollectReward(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	oldBar := bar.BalanceOf(a2u(gsa))
	CollectReward(1, false)
	std.TestSkipHeights(1)
	newBar := bar.BalanceOf(a2u(gsa))
	shouldEQ(t, newBar-oldBar, 481)

	pei := GetPrintExternalInfo()
	shouldEQ(t, pei, `{"height":1228,"time":1234570100,"position":[{"lpTokenId":1,"stakedHeight":126,"stakedTimestamp":1234567896,"incentive":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","rewardToken":"gno.land/r/onbloc/bar","rewardAmount":"20000000","rewardLeft":"19997178","startTimestamp":1234569600,"endTimestamp":1242345600,"rewardPerBlockX96":"407552276307944123423579991440","rewardPerBlock":"5","refundee":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","tokenAmountX96":"407552276307944123423579991440","tokenAmount":5,"tokenAmountFull":5,"tokenAmountActualFull":2}]}]}`)
}

func TestMintBarQux100_2(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := pn.Mint(
		barPath,      // token0
		quxPath,      // token1
		fee100,       // fee
		int32(-1000), // tickLower
		int32(1000),  // tickUpper
		"50",         // amount0Desired
		"50",         // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,
		gsa.String(),
	)

	shouldEQ(t, tokenId, 2)
	shouldEQ(t, gnft.OwnerOf(tid(tokenId)), std.GetOrigCaller()) // gsa

	std.TestSkipHeights(1)
}

func TestSkipSingleBlock(t *testing.T) {
	// skipped 1 block from previous test

	pei := GetPrintExternalInfo()
	shouldEQ(t, pei, `{"height":1229,"time":1234570102,"position":[{"lpTokenId":1,"stakedHeight":126,"stakedTimestamp":1234567896,"incentive":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","rewardToken":"gno.land/r/onbloc/bar","rewardAmount":"20000000","rewardLeft":"19997168","startTimestamp":1234569600,"endTimestamp":1242345600,"rewardPerBlockX96":"407552276307944123423579991440","rewardPerBlock":"5","refundee":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","tokenAmountX96":"815104552615888246847159982880","tokenAmount":10,"tokenAmountFull":10,"tokenAmountActualFull":4}]}]}`)
}

func TestStakeToken_2(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	gnft.Approve(a2u(GetOrigPkgAddr()), tid(2))
	StakeToken(2)

	std.TestSkipHeights(1)
}

func TestSingleBlock_TwoPosition(t *testing.T) {
	// skipped 1 block from previous test

	pei := GetPrintExternalInfo()
	shouldEQ(t, pei, `{"height":1230,"time":1234570104,"position":[{"lpTokenId":1,"stakedHeight":126,"stakedTimestamp":1234567896,"incentive":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","rewardToken":"gno.land/r/onbloc/bar","rewardAmount":"20000000","rewardLeft":"19997154","startTimestamp":1234569600,"endTimestamp":1242345600,"rewardPerBlockX96":"407552276307944123423579991440","rewardPerBlock":"5","refundee":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","tokenAmountX96":"1018880690769860308558949978600","tokenAmount":12,"tokenAmountFull":12,"tokenAmountActualFull":5}]},{"lpTokenId":2,"stakedHeight":1229,"stakedTimestamp":1234570102,"incentive":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","rewardToken":"gno.land/r/onbloc/bar","rewardAmount":"20000000","rewardLeft":"19997154","startTimestamp":1234569600,"endTimestamp":1242345600,"rewardPerBlockX96":"407552276307944123423579991440","rewardPerBlock":"5","refundee":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","tokenAmountX96":"203776138153972061711789995720","tokenAmount":2,"tokenAmountFull":2,"tokenAmountActualFull":0}]}]}`)

	std.TestSkipHeights(1)
}

func TestCollectRewardAll(t *testing.T) {
	std.TestSkipHeights(10)

	pei := GetPrintExternalInfo()
	shouldEQ(t, pei, `{"height":1241,"time":1234570126,"position":[{"lpTokenId":1,"stakedHeight":126,"stakedTimestamp":1234567896,"incentive":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","rewardToken":"gno.land/r/onbloc/bar","rewardAmount":"20000000","rewardLeft":"19997084","startTimestamp":1234569600,"endTimestamp":1242345600,"rewardPerBlockX96":"407552276307944123423579991440","rewardPerBlock":"5","refundee":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","tokenAmountX96":"3260418210463552987388639931520","tokenAmount":41,"tokenAmountFull":40,"tokenAmountActualFull":19}]},{"lpTokenId":2,"stakedHeight":1229,"stakedTimestamp":1234570102,"incentive":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","rewardToken":"gno.land/r/onbloc/bar","rewardAmount":"20000000","rewardLeft":"19997084","startTimestamp":1234569600,"endTimestamp":1242345600,"rewardPerBlockX96":"407552276307944123423579991440","rewardPerBlock":"5","refundee":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","tokenAmountX96":"2445313657847664740541479948640","tokenAmount":30,"tokenAmountFull":30,"tokenAmountActualFull":8}]}]}`)

	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	oldBar := bar.BalanceOf(a2u(gsa))
	CollectReward(1, false)
	newBar := bar.BalanceOf(a2u(gsa))
	shouldEQ(t, newBar-oldBar, 19)

	oldBar = newBar
	CollectReward(2, false)
	newBar = bar.BalanceOf(a2u(gsa))
	shouldEQ(t, newBar-oldBar, 8)
}

func TestPrintAfterCollect(t *testing.T) {
	pei := GetPrintExternalInfo()
	shouldEQ(t, pei, `{"height":1241,"time":1234570126,"position":[{"lpTokenId":1,"stakedHeight":126,"stakedTimestamp":1234567896,"incentive":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","rewardToken":"gno.land/r/onbloc/bar","rewardAmount":"20000000","rewardLeft":"19997014","startTimestamp":1234569600,"endTimestamp":1242345600,"rewardPerBlockX96":"407552276307944123423579991440","rewardPerBlock":"5","refundee":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","tokenAmountX96":"0","tokenAmount":0,"tokenAmountFull":0,"tokenAmountActualFull":0}]},{"lpTokenId":2,"stakedHeight":1229,"stakedTimestamp":1234570102,"incentive":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","rewardToken":"gno.land/r/onbloc/bar","rewardAmount":"20000000","rewardLeft":"19997014","startTimestamp":1234569600,"endTimestamp":1242345600,"rewardPerBlockX96":"407552276307944123423579991440","rewardPerBlock":"5","refundee":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","tokenAmountX96":"0","tokenAmount":0,"tokenAmountFull":0,"tokenAmountActualFull":0}]}]}`)
}
