// ---       runtime: cycle=129.8k imports=7 allocs=3.8M(0.76%)
// ---       runtime: cycle=573.2k imports=7 allocs=13.5M(2.71%)
// ---       runtime: cycle=1.0M imports=7 allocs=23.2M(4.64%)
// ---       runtime: cycle=1.5M imports=7 allocs=33.0M(6.61%)
// ---       runtime: cycle=1.9M imports=7 allocs=43.2M(8.65%)
// ---       runtime: cycle=2.0M imports=7 allocs=44.1M(8.81%)
// ---       runtime: cycle=2.0M imports=7 allocs=44.9M(8.97%)
// ---       runtime: cycle=2.0M imports=7 allocs=45.7M(9.14%)
// ---       runtime: cycle=2.5M imports=7 allocs=56.5M(11.30%)
// ---       runtime: cycle=3.0M imports=7 allocs=67.2M(13.44%)
// ---       runtime: cycle=3.0M imports=7 allocs=68.0M(13.60%)
// ---       runtime: cycle=3.4M imports=7 allocs=77.3M(15.46%)
// ---       runtime: cycle=3.4M imports=7 allocs=78.1M(15.62%)
// ---       runtime: cycle=3.5M imports=7 allocs=78.9M(15.79%)
// ---       runtime: cycle=3.7M imports=7 allocs=84.0M(16.79%)
// ok      ./examples/gno.land/r/gnoswap/v2/position 	1.88s

package position

import (
	"std"
	"testing"

	"gno.land/r/gnoswap/v2/consts"

	pl "gno.land/r/gnoswap/v2/pool"

	"gno.land/r/gnoswap/v2/gnft"
	"gno.land/r/gnoswap/v2/gns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"
)

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
	pl.CreatePool(barPath, fooPath, fee500, "130621891405341611593710811006") // tick = 10000
}

func TestMintPosition01InRange(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), 18394892)
	foo.Approve(a2u(consts.POOL_ADDR), 50000000)

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		8000,
		12000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		gsa.String(),
	)

	shouldEQ(t, tokenId, 1)
	shouldEQ(t, getNextId(), 2)
	shouldEQ(t, amount0, "18394892")
	shouldEQ(t, amount1, "50000000")

	position := positions[tokenId]
	shouldEQ(t, position.nonce.ToString(), "0")
	shouldEQ(t, position.operator, gsa)
	shouldEQ(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	shouldEQ(t, position.tickLower, 8000)
	shouldEQ(t, position.tickUpper, 12000)
	shouldEQ(t, position.liquidity.ToString(), "318704392")
	shouldEQ(t, position.feeGrowthInside0LastX128.ToString(), "0")
	shouldEQ(t, position.feeGrowthInside1LastX128.ToString(), "0")
	shouldEQ(t, position.tokensOwed0.ToString(), "0")
	shouldEQ(t, position.tokensOwed1.ToString(), "0")
	shouldEQ(t, position.burned, false)
}

func TestMintPosition02InRange(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), 18394892)
	foo.Approve(a2u(consts.POOL_ADDR), 50000000)

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		8000,
		12000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		gsa.String(),
	)

	shouldEQ(t, tokenId, 2)
	shouldEQ(t, getNextId(), 3)
	shouldEQ(t, amount0, "18394892")
	shouldEQ(t, amount1, "50000000")

	position := positions[tokenId]
	shouldEQ(t, position.nonce.ToString(), "0")
	shouldEQ(t, position.operator, gsa)
	shouldEQ(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	shouldEQ(t, position.tickLower, 8000)
	shouldEQ(t, position.tickUpper, 12000)
	shouldEQ(t, position.liquidity.ToString(), "318704392")
	shouldEQ(t, position.feeGrowthInside0LastX128.ToString(), "0")
	shouldEQ(t, position.feeGrowthInside1LastX128.ToString(), "0")
	shouldEQ(t, position.tokensOwed0.ToString(), "0")
	shouldEQ(t, position.tokensOwed1.ToString(), "0")
	shouldEQ(t, position.burned, false)
}

func TestMintPosition03InRange(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		6000,
		14000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		gsa.String(),
	)

	shouldEQ(t, tokenId, 3)
	shouldEQ(t, getNextId(), 4)
	shouldEQ(t, amount0, "18394892")
	shouldEQ(t, amount1, "50000000")

	position := positions[tokenId]
	shouldEQ(t, position.nonce.ToString(), "0")
	shouldEQ(t, position.operator, gsa)
	shouldEQ(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	shouldEQ(t, position.tickLower, 6000)
	shouldEQ(t, position.tickUpper, 14000)
	shouldEQ(t, position.liquidity.ToString(), "167312775")
	shouldEQ(t, position.feeGrowthInside0LastX128.ToString(), "0")
	shouldEQ(t, position.feeGrowthInside1LastX128.ToString(), "0")
	shouldEQ(t, position.tokensOwed0.ToString(), "0")
	shouldEQ(t, position.tokensOwed1.ToString(), "0")
	shouldEQ(t, position.burned, false)
}

func TestSwap1(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), 1234567)

	std.TestSetRealm(rouRealm)
	std.TestSetOrigCaller(gsa)
	amount0, amount1 := pl.Swap(
		barPath,
		fooPath,
		fee500,
		gsa.String(),
		true,
		"1234567",
		consts.MIN_PRICE,
		gsa.String(),
	)

	shouldEQ(t, amount0, "1234567")
	shouldEQ(t, amount1, "-3345595")

	position := positions[uint64(1)]
	shouldEQ(t, position.nonce.ToString(), "0")
	shouldEQ(t, position.operator, gsa)
	shouldEQ(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	shouldEQ(t, position.tickLower, 8000)
	shouldEQ(t, position.tickUpper, 12000)
	shouldEQ(t, position.liquidity.ToString(), "318704392")
	shouldEQ(t, position.feeGrowthInside0LastX128.ToString(), "0")
	shouldEQ(t, position.feeGrowthInside1LastX128.ToString(), "0")
	shouldEQ(t, position.tokensOwed0.ToString(), "0")
	shouldEQ(t, position.tokensOwed1.ToString(), "0")
	shouldEQ(t, position.burned, false)
}

func TestUnclaimedFee01(t *testing.T) {
	amount0, amount1 := unclaimedFee(1)

	shouldEQ(t, amount0.ToString(), "244")
	shouldEQ(t, amount1.ToString(), "0")
}

func TestUnclaimedFee02(t *testing.T) {
	amount0, amount1 := unclaimedFee(2)

	shouldEQ(t, amount0.ToString(), "244")
	shouldEQ(t, amount1.ToString(), "0")
}

func TestUnclaimedFee03(t *testing.T) {
	amount0, amount1 := unclaimedFee(3)

	shouldEQ(t, amount0.ToString(), "128")
	shouldEQ(t, amount1.ToString(), "0")
}

func TestDecreaseLiquidity03(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	_lpTokenId := uint64(03)

	ownerOfPosition := gnft.OwnerOf(tid(_lpTokenId))
	shouldEQ(t, ownerOfPosition, std.GetOrigCaller())

	// approve fee0, fee1 to pool ( for withdrawal protocol fee )
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, fee0, fee1, amount0, amount1, poolPath := DecreaseLiquidity(_lpTokenId, 100, "0", "0", max_timeout, false)

	shouldEQ(t, tokenId, _lpTokenId)
	shouldEQ(t, amount0, "18651446")
	shouldEQ(t, amount1, "49304404")

	shouldEQ(t, fee0, "127")
	shouldEQ(t, fee1, "0")

	ownerOfPosition = gnft.OwnerOf(tid(_lpTokenId))
	shouldEQ(t, ownerOfPosition, std.GetOrigCaller())

	position := positions[_lpTokenId]
	shouldEQ(t, position.nonce.ToString(), "0")
	shouldEQ(t, position.operator, gsa)
	shouldEQ(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	shouldEQ(t, position.tickLower, 6000)
	shouldEQ(t, position.tickUpper, 14000)
	shouldEQ(t, position.liquidity.ToString(), "0")
	shouldEQ(t, position.feeGrowthInside0LastX128.ToString(), "261325796985563264150557581113385")
	shouldEQ(t, position.feeGrowthInside1LastX128.ToString(), "0")
	shouldEQ(t, position.tokensOwed0.ToString(), "0")
	shouldEQ(t, position.tokensOwed1.ToString(), "0")
	shouldEQ(t, position.burned, true)
}

func TestReposition(t *testing.T) {
	std.TestSetOrigCaller(gsa)

	_lpTokenId := uint64(3)

	// check current state
	position := positions[_lpTokenId]
	shouldEQ(t, position.nonce.ToString(), "0")
	shouldEQ(t, position.operator, gsa)
	shouldEQ(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	shouldEQ(t, position.tickLower, 6000)
	shouldEQ(t, position.tickUpper, 14000)
	shouldEQ(t, position.liquidity.ToString(), "0")
	shouldEQ(t, position.feeGrowthInside0LastX128.ToString(), "261325796985563264150557581113385")
	shouldEQ(t, position.feeGrowthInside1LastX128.ToString(), "0")
	shouldEQ(t, position.tokensOwed0.ToString(), "0")
	shouldEQ(t, position.tokensOwed1.ToString(), "0")
	shouldEQ(t, position.burned, true)

	Reposition(
		_lpTokenId, // tokenId
		8000,       // tickLower
		12000,      // tickUpper
		"18651446", // amount0Desired
		"49304404", // amount1Desired
		"0",        // amount0Min
		"0",        // amount1Min
	)

	position = positions[_lpTokenId]
	shouldEQ(t, position.nonce.ToString(), "0")
	shouldEQ(t, position.operator, gsa)
	shouldEQ(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	shouldEQ(t, position.tickLower, 8000)
	shouldEQ(t, position.tickUpper, 12000)
	shouldEQ(t, position.liquidity.ToString(), "314786446")
	// shouldEQ(t, position.feeGrowthInside0LastX128.ToString(), "261325796985563264150557581113385")
	// shouldEQ(t, position.feeGrowthInside1LastX128.ToString(), "0")
	shouldEQ(t, position.tokensOwed0.ToString(), "0")
	shouldEQ(t, position.tokensOwed1.ToString(), "0")
	shouldEQ(t, position.burned, false)
}

func TestAfterReposition03UnclaimedFee(t *testing.T) {
	amount0, amount1 := unclaimedFee(3)
	println("AFTER REPOSITION, POSITION 3 UNCLAIMED FEE")
	println("amount0: ", amount0.ToString())
	println("amount1: ", amount1.ToString())

	shouldEQ(t, amount0.ToString(), "0")
	shouldEQ(t, amount1.ToString(), "0")
}

func TestSwap2(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), 1234567)

	std.TestSetRealm(rouRealm)
	std.TestSetOrigCaller(gsa)
	amount0, amount1 := pl.Swap(
		barPath,
		fooPath,
		fee500,
		gsa.String(),
		true,
		"1234567",
		consts.MIN_PRICE,
		gsa.String(),
	)

	shouldEQ(t, amount0, "1234567")
	shouldEQ(t, amount1, "-3330062")

	position := positions[uint64(1)]
	shouldEQ(t, position.nonce.ToString(), "0")
	shouldEQ(t, position.operator, gsa)
	shouldEQ(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	shouldEQ(t, position.tickLower, 8000)
	shouldEQ(t, position.tickUpper, 12000)
	shouldEQ(t, position.liquidity.ToString(), "318704392")
	// shouldEQ(t, position.feeGrowthInside0LastX128.ToString(), "0")
	// shouldEQ(t, position.feeGrowthInside1LastX128.ToString(), "0")
	shouldEQ(t, position.tokensOwed0.ToString(), "0")
	shouldEQ(t, position.tokensOwed1.ToString(), "0")
	shouldEQ(t, position.burned, false)
}

func TestUnclaimedFee01_AfterSwap2(t *testing.T) {
	amount0, amount1 := unclaimedFee(1)

	shouldEQ(t, amount0.ToString(), "451") // 244 + 207 = 451
	shouldEQ(t, amount1.ToString(), "0")
}

func TestUnclaimedFee02_AfterSwap2(t *testing.T) {
	amount0, amount1 := unclaimedFee(2)

	shouldEQ(t, amount0.ToString(), "451") // 244 + 207 = 451
	shouldEQ(t, amount1.ToString(), "0")
}

func TestUnclaimedFee03_AfterSwap2(t *testing.T) {
	amount0, amount1 := unclaimedFee(3)

	shouldEQ(t, amount0.ToString(), "204") // +204
	shouldEQ(t, amount1.ToString(), "0")

	{
		std.TestSetOrigCaller(gsa)
		std.TestSetRealm(gsaRealm)
		bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

		tokenId, afterFee0, afterFee1, poolPath, fee0, fee1 := CollectFee(3)
		position := positions[tokenId]
		shouldEQ(t, position.tokensOwed0.ToString(), "0")
		shouldEQ(t, position.tokensOwed1.ToString(), "0")
		shouldEQ(t, fee0, "204")
		shouldEQ(t, fee1, "0")
	}

}
