// ---       runtime: cycle=130.1k imports=7 allocs=3.8M(0.77%)
// ---       runtime: cycle=130.8k imports=7 allocs=3.9M(0.78%)
// ---       runtime: cycle=573.6k imports=7 allocs=13.6M(2.71%)
// ---       runtime: cycle=574.5k imports=7 allocs=13.6M(2.73%)
// ---       runtime: cycle=1.0M imports=7 allocs=23.4M(4.67%)
// ---       runtime: cycle=1.0M imports=7 allocs=23.4M(4.69%)
// ---       runtime: cycle=1.1M imports=7 allocs=26.2M(5.23%)
// ---       runtime: cycle=1.1M imports=7 allocs=26.9M(5.38%)
// ---       runtime: cycle=1.6M imports=7 allocs=37.0M(7.41%)
// ---       runtime: cycle=1.6M imports=7 allocs=37.9M(7.57%)
// ---       runtime: cycle=1.7M imports=7 allocs=38.7M(7.74%)
// ---       runtime: cycle=2.4M imports=7 allocs=54.2M(10.84%)
// ---       runtime: cycle=2.4M imports=7 allocs=55.0M(11.00%)
// ---       runtime: cycle=2.5M imports=7 allocs=55.9M(11.18%)
// ---       runtime: cycle=2.6M imports=7 allocs=60.1M(12.01%)
// ---       runtime: cycle=3.0M imports=7 allocs=69.8M(13.96%)
// ---       runtime: cycle=3.4M imports=7 allocs=79.6M(15.92%)
// ok      ./examples/gno.land/r/gnoswap/v2/position 	1.83s

package position

import (
	"std"
	"testing"

	"gno.land/r/gnoswap/v2/consts"

	pl "gno.land/r/gnoswap/v2/pool"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"

	"gno.land/r/gnoswap/v2/gns"
	// u256 "gno.land/p/gnoswap/uint256"
)

func init() {
	// set pool create fee to 0 for testing
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)
	pl.SetPoolCreationFee(0)
}

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
	pl.CreatePool(barPath, fooPath, fee500, "130621891405341611593710811006") // tick = 10000
}

func TestPoolBalanceInit(t *testing.T) {
	poolBar := bar.BalanceOf(a2u(consts.POOL_ADDR))
	poolFoo := foo.BalanceOf(a2u(consts.POOL_ADDR))

	shouldEQ(t, poolBar, 0)
	shouldEQ(t, poolFoo, 0)
}

func TestMintPosition01InRange(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		8000,
		12000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		gsa.String(),
	)

	shouldEQ(t, tokenId, 1)
	shouldEQ(t, getNextId(), 2)
	shouldEQ(t, amount0, "18394892")
	shouldEQ(t, amount1, "50000000")
}

func TestPoolBalanceMint01(t *testing.T) {
	poolBar := bar.BalanceOf(a2u(consts.POOL_ADDR))
	poolFoo := foo.BalanceOf(a2u(consts.POOL_ADDR))

	shouldEQ(t, poolBar, 18394892)
	shouldEQ(t, poolFoo, 50000000)
}

func TestMintPosition02InRange(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		9000,
		11000,
		"10000000",
		"10000000",
		"0",
		"0",
		max_timeout,
		gsa.String(),
	)

	shouldEQ(t, tokenId, 2)
	shouldEQ(t, getNextId(), 3)
	shouldEQ(t, amount0, "3678979")
	shouldEQ(t, amount1, "10000000")
}

func TestPoolBalanceMint02(t *testing.T) {
	poolBar := bar.BalanceOf(a2u(consts.POOL_ADDR))
	poolFoo := foo.BalanceOf(a2u(consts.POOL_ADDR))

	shouldEQ(t, poolBar, 22073871)
	shouldEQ(t, poolFoo, 60000000)
}

func TestCollectFeeBeforeSwap(t *testing.T) {
	tokenId, fee0, fee1, poolPath, _, _ := CollectFee(1)

	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, fee0, "0")
	shouldEQ(t, fee1, "0")
	shouldEQ(t, poolPath, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
}

func TestUnclaimedFee0(t *testing.T) {
	amount0, amount1 := unclaimedFee(1)

	shouldEQ(t, amount0.ToString(), "0")
	shouldEQ(t, amount1.ToString(), "0")
}

func TestSwap1(t *testing.T) {
	// printPoolBalance()
	// token0: 22073871
	// token1: 60000000

	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), 1234567)

	std.TestSetRealm(rouRealm)
	std.TestSetOrigCaller(gsa)
	amount0, amount1 := pl.Swap(
		barPath,
		fooPath,
		fee500,
		gsa.String(),
		true,
		"1234567",
		consts.MIN_PRICE,
		gsa.String(),
	)

	shouldEQ(t, amount0, "1234567")
	shouldEQ(t, amount1, "-3338723")

	// printPoolBalance()
	// token0: 23308438 (22073871 + 1234567)
	// token1: 56661277 (60000000 - 3338723)
}

func TestUnclaimedFeePos01Swap01(t *testing.T) {
	amount0, amount1 := unclaimedFee(1)

	shouldEQ(t, amount0.ToString(), "444") // if only one position, this should be 617
	shouldEQ(t, amount1.ToString(), "0")
}

func TestUnclaimedFeePos02Swap01(t *testing.T) {
	amount0, amount1 := unclaimedFee(2)

	shouldEQ(t, amount0.ToString(), "173")
	shouldEQ(t, amount1.ToString(), "0")
}

func TestSwap2(t *testing.T) {
	// printPoolBalance()
	// token0: 23308438
	// token1: 56661277

	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	std.TestSetRealm(rouRealm)
	std.TestSetOrigCaller(gsa)
	amount0, amount1 := pl.Swap(
		barPath,
		fooPath,
		fee500,
		gsa.String(),
		true,
		"20000000", //
		consts.MIN_PRICE,
		gsa.String(),
	)

	shouldEQ(t, amount0, "20000000")
	shouldEQ(t, amount1, "-49951535")

	// printPoolBalance()
	// token0: 43308438 (23308438 + 20000000)
	// token1: 6709742 (56661277 - 49951535)
}

func TestUnclaimedFeePos01Swap02(t *testing.T) {
	amount0, amount1 := unclaimedFee(1)

	shouldEQ(t, amount0.ToString(), "8683")
	shouldEQ(t, amount1.ToString(), "0")
}

func TestUnclaimedFeePos02Swap02(t *testing.T) {
	amount0, amount1 := unclaimedFee(2)

	shouldEQ(t, amount0.ToString(), "1935")
	shouldEQ(t, amount1.ToString(), "0")
}

func TestCollectFeePos01(t *testing.T) {
	// printPoolBalance()
	// token0: 43308438
	// token1: 6709742

	tokenId, fee0, fee1, poolPath, _, _ := CollectFee(1)

	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, fee0, "8597") // 99% of 8683, rest 1% is protocol fee
	shouldEQ(t, fee1, "0")
	shouldEQ(t, poolPath, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")

	// printPoolBalance()
	// token0: 43299755 (43308438 - 8683)
	// token1: 6709742
}

func TestDecreaseAllPos01(t *testing.T) {
	// printPoolBalance()
	// token0: 43299755
	// token1: 6709742

	tokenId, liquidity, fee0, fee1, amount0, amount1, poolPath := DecreaseLiquidity(
		uint64(1),   // tokenId
		100,         // liquidityRatio
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
		true,        // unwrapResult
	)

	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, liquidity, "318704392")
	shouldEQ(t, fee0, "0")
	shouldEQ(t, fee1, "0")
	shouldEQ(t, amount0, "35751245")
	shouldEQ(t, amount1, "6709740")
	shouldEQ(t, poolPath, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")

	// printPoolBalance()
	// token0: 7548510 (43299755 - 35751245)
	// token1: 2 (6709742 - 6709740)
}

func TestDecreaseAllPos02(t *testing.T) {
	// printPoolBalance()
	// token0: 7548510
	// token1: 2

	tokenId, liquidity, fee0, fee1, amount0, amount1, poolPath := DecreaseLiquidity(
		uint64(2),   // tokenId
		100,         // liquidityRatio
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
		true,        // unwrapResult
	)

	shouldEQ(t, tokenId, uint64(2))
	shouldEQ(t, liquidity, "124373229")
	shouldEQ(t, fee0, "1916") // 99% of 1935, rest 1% is protocol fee
	shouldEQ(t, fee1, "0")
	shouldEQ(t, amount0, "7546572")
	shouldEQ(t, amount1, "0")
	shouldEQ(t, poolPath, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")

	// printPoolBalance()
	// token0: 3 (7548510 - 7546572 - 1935)
	// token1: 2
}

func printPoolBalance() {
	poolBar := bar.BalanceOf(a2u(consts.POOL_ADDR))
	poolFoo := foo.BalanceOf(a2u(consts.POOL_ADDR))

	println("pool token0 bar:", poolBar)
	println("pool token1 foo:", poolFoo)
	println()
}
